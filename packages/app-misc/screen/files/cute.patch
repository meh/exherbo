diff --git a/src/ansi.c b/src/ansi.c
index b68ebed..ebb33f9 100644
--- a/src/ansi.c
+++ b/src/ansi.c
@@ -69,6 +69,7 @@ struct mline mline_null;
 struct mchar mchar_null;
 struct mchar mchar_blank = { ' ', 0, 0, 0, 0, 0, 0 };
 struct mchar mchar_so = { ' ', A_SO, 0, 0, 0, 0, 0};
+struct mchar mchar_bars = { ' ', 0, 0, 0, 0, 0, 0 };
 
 uint64_t renditions[NUM_RENDS] = { 65529 /* =ub */ , 65531 /* =b */ , 65533 /* =u */  };
 
diff --git a/src/ansi.h b/src/ansi.h
index 54b4c28..a85f10a 100644
--- a/src/ansi.h
+++ b/src/ansi.h
@@ -183,6 +183,7 @@ extern struct mline mline_blank;
 extern struct mline mline_null;
 extern struct mline mline_old;
 
+extern struct mchar mchar_bars;
 extern struct mchar mchar_so;
 extern struct mchar mchar_blank;
 extern struct mchar mchar_null;
diff --git a/src/comm.c b/src/comm.c
index 0744ff0..f211c16 100644
--- a/src/comm.c
+++ b/src/comm.c
@@ -48,6 +48,7 @@ struct comm comms[RC_LAST + 1] =
   { "autodetach",	ARGS_1,				{NULL} },
   { "autonuke",		NEED_DISPLAY|ARGS_1,		{NULL} },
   { "backtick",		ARGS_1|ARGS_ORMORE,		{NULL} },
+  { "barsrendition",	ARGS_012,			{NULL} },
   { "bce",		NEED_FORE|ARGS_01,		{NULL} },
   { "bell",		ARGS_01,			{NULL} },
   { "bell_msg",		ARGS_01,			{NULL} },
diff --git a/src/display.c b/src/display.c
index a8a9572..16ca5eb 100644
--- a/src/display.c
+++ b/src/display.c
@@ -1561,19 +1561,10 @@ static void RemoveStatusMinWait()
 static int strlen_onscreen(char *c, char *end)
 {
 	int len = 0;
-	while (*c && (!end || c < end)) {
-		int v, dec = 0;
-		do {
-			v = FromUtf8(*c++, &dec);
-			if (v == -2)
-				c--;
-		}
-		while (v < 0 && (!end || c < end));
-		if (!utf8_iscomb(v)) {
-			if (utf8_isdouble(v))
-				len++;
-			len++;
-		}
+
+	while (*c && (!end || c <= end)) {
+		len += utf8_width(c);
+		c   += utf8_size(c);
 	}
 
 	return len;
@@ -1585,11 +1576,11 @@ static int PrePutWinMsg(char *s, int start, int max)
 	   Ideally, this would not be necessary. But fixing it the Right Way will
 	   probably take way more time. So this will have to do for now. */
 	if (D_encoding == UTF8) {
-		int chars = strlen_onscreen((s + start), (s + max));
+		int chars = strlen_onscreen((s + start), NULL);
 		D_encoding = 0;
-		PutWinMsg(s, start, max + ((max - start) - chars));	/* Multibyte count */
+		PutWinMsg(s, start, strlen(s + start));	/* Multibyte count */
 		D_encoding = UTF8;
-		D_x -= (max - chars);	/* Yak! But this is necessary to count for
+		D_x -= strlen(s + start) - chars + 1;	/* Yak! But this is necessary to count for
 					   the fact that not every byte represents a
 					   character. */
 		return start + chars;
@@ -1770,19 +1761,17 @@ void RefreshLine(int y, int from, int to, int isblank)
 				xx = to > cv->c_xe ? cv->c_xe : to;
 				l = strlen(buf);
 				GotoPos(from, y);
-				SetRendition(&mchar_so);
+				SetRendition(&mchar_bars);
 				if (l > xx - cv->c_xs + 1)
 					l = xx - cv->c_xs + 1;
-				l = PrePutWinMsg(buf, from - cv->c_xs, l + extrabytes);
-				from = cv->c_xs + l;
 				for (; from <= xx; from++)
-					PUTCHARLP(' ');
+					PUTCHARLP(9490);
 				break;
 			}
 			if (from == cv->c_xe + 1 && (y >= cv->c_ys - captiontop) && (y <= cv->c_ye + !captiontop)) {
 				GotoPos(from, y);
-				SetRendition(&mchar_so);
-				PUTCHARLP(' ');
+				SetRendition(&mchar_bars);
+				PUTCHARLP(y > cv->c_ye ? 9495 : 9497);
 				from++;
 				break;
 			}
@@ -1814,14 +1803,14 @@ void RefreshLine(int y, int from, int to, int isblank)
 		if (lcv->c_layer && lcv->c_xoff + lcv->c_layer->l_width == from) {
 			GotoPos(from, y);
 			SetRendition(&mchar_blank);
-			PUTCHARLP('|');
+			PUTCHARLP(9497);
 			from++;
 		}
 		if (lcv->c_layer && yy == lcv->c_layer->l_height) {
 			GotoPos(from, y);
 			SetRendition(&mchar_blank);
 			while (from <= lvp->v_xe && from - lvp->v_xoff < lcv->c_layer->l_width) {
-				PUTCHARLP('-');
+				PUTCHARLP(9490);
 				from++;
 			}
 			if (from >= lvp->v_xe + 1)
diff --git a/src/encoding.c b/src/encoding.c
index 0b3f2d6..590853c 100644
--- a/src/encoding.c
+++ b/src/encoding.c
@@ -1504,3 +1504,39 @@ void LoadFontTranslationsForEncoding(int encoding)
 	if (f > 0 && recodetabs[f].flags == 0)
 		LoadFontTranslation(f, 0);
 }
+
+int utf8_width(char* buf)
+{
+	wchar_t result = 0;
+
+	if (buf[0] > 0) {
+		return 1;
+	}
+
+	mbtowc(&result, buf, 4);
+	return wcwidth(result);
+}
+
+int utf8_size(char* buf)
+{
+	unsigned char* utf = (unsigned char*) buf;
+
+	if (utf[0] <= 0x7F) {
+		return 1;
+	}
+	else if (utf[0] <= 0xBF) {
+		return 0;
+	}
+	else if (utf[0] <= 0xDF) {
+		return 2;
+	}
+	else if (utf[0] <= 0xEF) {
+		return 3;
+	}
+	else if (utf[0] <= 0xF4) {
+		return 4;
+	}
+	else {
+		return 0;
+	}
+}
diff --git a/src/encoding.h b/src/encoding.h
index 76859cd..2cee9a5 100644
--- a/src/encoding.h
+++ b/src/encoding.h
@@ -2,6 +2,8 @@
 #define SCREEN_ENCODING_H
 
 #include "window.h"
+#include <stdio.h>
+#include <wchar.h>
 
 void  InitBuiltinTabs (void);
 struct mchar *recode_mchar (struct mchar *, int, int);
@@ -27,4 +29,7 @@ int   RecodeBuf (unsigned char *, int, int, int, unsigned char *);
 int   PrepareEncodedChar (int);
 int   EncodeChar (char *, int, int, int *);
 
+int utf8_width(char *buf);
+int utf8_size(char* buf);
+
 #endif /* SCREEN_ENCODING_H */
diff --git a/src/process.c b/src/process.c
index 1ed90eb..16f5e4e 100644
--- a/src/process.c
+++ b/src/process.c
@@ -3444,6 +3444,18 @@ void DoAction(struct action *act, int key)
 		}
 		WindowChanged(0, '`');
 		break;
+	case RC_BARSRENDITION:
+		if (args[0]) {
+			i = ParseAttrColor(args[0], 1);
+			if (i == 0)
+				break;
+			ApplyAttrColor(i, &mchar_bars);
+			WindowChanged((Window *)0, 0);
+		}
+		if (msgok)
+			OutputMsg(0, "Bars attributes 0x%02x  colorbg 0x%02x  colorfg 0x%02x", (unsigned char)mchar_bars.attr,
+				  (unsigned char)mchar_bars.colorbg, (unsigned char)mchar_bars.colorfg);
+		break;
 	case RC_BLANKER:
 		if (blankerprg) {
 			RunBlanker(blankerprg);
diff --git a/src/screen.c b/src/screen.c
index bc2a538..b0c2a36 100644
--- a/src/screen.c
+++ b/src/screen.c
@@ -1528,6 +1528,7 @@ void PutWinMsg(char *s, int start, int max)
 			if (n > max)
 				n = max;
 			max -= n;
+			max += utf8_width(s) - 1;
 			p += n;
 			while (n-- > 0) {
 				if (start-- > 0)
diff --git a/src/winmsg.c b/src/winmsg.c
index 41dfea5..ca95c50 100644
--- a/src/winmsg.c
+++ b/src/winmsg.c
@@ -41,6 +41,7 @@
 #include "process.h"
 #include "sched.h"
 #include "mark.h"
+#include "encoding.h"
 
 /* TODO: rid global variable (has been renamed to point this out; see commit
  * history) */
@@ -75,36 +76,57 @@ extern Backtick *backticks;
 
 static void _MakeWinMsgEvRec(WinMsgBufContext *, WinMsgCond *, char *, Window *, int *, int);
 
-
 /* TODO: remove the redundant arguments */
 static char *pad_expand(WinMsgBuf *winmsg, char *buf, char *p, int numpad, int padlen)
 {
-	char *pn, *pn2;
-	int i, r;
-
-	padlen = padlen - (p - buf);	/* space for rent */
-	if (padlen < 0)
-		padlen = 0;
-	pn2 = pn = p + padlen;
-	r = winmsg->numrend;
-	while (p >= buf) {
-		if (r && *p != CHRPAD && p - buf == winmsg->rendpos[r - 1]) {
-			winmsg->rendpos[--r] = pn - buf;
+	char *pp, *pd, padded[MAXSTR] = {0};
+	int offset, pads, r, i;
+
+	pp = buf;
+	while (pp <= p) {
+		if (*pp == CHRPAD) {
+			pp++;
+		}
+		else {
+			padlen -= utf8_width(pp);
+			pp     += utf8_size(pp);
+		}
+	}
+
+	r = 0;
+	offset = 0;
+	pads = 0;
+	pp = buf;
+	pd = padded;
+
+	while (pp <= p) {
+		if (r < winmsg->numrend && pp - buf == winmsg->rendpos[r]) {
+			winmsg->rendpos[r] += offset;
+			r++;
 			continue;
 		}
-		*pn-- = *p;
-		if (*p-- == CHRPAD) {
-			pn[1] = ' ';
-			i = numpad > 0 ? (padlen + numpad - 1) / numpad : 0;
-			padlen -= i;
+
+		if (*pp == CHRPAD) {
+			i = (padlen / numpad);
+			if (pads == 0 && padlen % 2 == 1)
+				i++;
+			offset += i - 1;
 			while (i-- > 0)
-				*pn-- = ' ';
-			numpad--;
-			if (r && p - buf == winmsg->rendpos[r - 1])
-				winmsg->rendpos[--r] = pn - buf;
+				*pd++ = ' ';
+			pd--;
+			pads++;
+		}
+		else {
+			*pd = *pp;
 		}
+
+		pp++;
+		pd++;
 	}
-	return pn2;
+
+	strcpy(buf, padded);
+
+	return p + padlen;
 }
 
 int AddWinMsgRend(WinMsgBuf *winmsg, const char *str, uint64_t r)
@@ -205,7 +227,6 @@ winmsg_esc_ex(PadOrTrunc, int *numpad, int *lastpad, int padlen)
 
 			if (!esc->flags.plus && padlen == 0)
 				esc->num = wmbc->p - winmsg->buf;
-
 			esc->flags.plus = 0;
 		} else if (!esc->flags.zero) {
 			if (**src != WINESC_PAD && esc->num == 0 && !esc->flags.plus)
