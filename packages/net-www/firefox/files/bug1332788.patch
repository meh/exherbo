Upstream: https://bugzilla.mozilla.org/show_bug.cgi?id=1332788

# HG changeset patch
# User Nathan Froyd <froydnj@gmail.com>

Bug 1332788 - explicitly declare and instantiate gfxFont templates; r=jfkthame

gfxFont declares several templated methods in its class declaration, but
does not define the methods there.  Instead, the (templated) definition
of these methods are provided in the .cpp implementation file. In one
case, gfxFont::InitFakeSmallCapsRun, explicit template specializations
are provided instead of a templated definition.  In anther,
gfxFont::SplitAndInitTextRun is explicitly instantiated with two
different template types to ensure that definitions exist for any
callers outside of gfxFont.cpp's compilation unit.  This latter explicit
instantiation also will implicitly instantiate gfxFont::GetShapedWord in
various guises.

This scheme works OK until GCC 6.3.0 + PGO comes along.  What appears to
be happening in that case is:

1) gfxFont::SplitAndInitTextRun is instantiated;
2) gfxFont::GetShapedWord is instantiated;
3) gfxFont::GetShapedWord is inlined into all its callers in the
   compilation unit for gfxFont.cpp, based on profile data;
4) gfxFont::GetShapedWord's definition is then deleted from the
   compilation unit for gfxFont.cpp, as there are no remaining callers.

It is unclear why step 3 does not happen, or step 3 happens and step 4
does not, with our current PGO setups.

This patch does three inter-related things to try and deal with this
situation:

1) Explicit instantiations of gfxFont::GetShapedWord are added, similar
   to the existing explicit instantiations of
   gfxFont::SplitAndInitTextRun.
2) Said explicit instantiations are explicitly declared in gfxFont.h;
   it's not clear whether this is necessary, but it does seem like good
   practice.
3) Explicit declarations for the specializations of
   gfxFont::InitFakeSmallCapsRun are added to gfxFont.h, for the same
   reason as in 2).

diff --git a/gfx/thebes/gfxFont.cpp b/gfx/thebes/gfxFont.cpp
index 59965bb..b37d70e 100644
--- a/gfx/thebes/gfxFont.cpp
+++ b/gfx/thebes/gfxFont.cpp
@@ -3066,16 +3066,39 @@ gfxFont::SplitAndInitTextRun(DrawTarget *aDrawTarget,
         hash = 0;
         wordStart = i + 1;
         wordIs8Bit = true;
     }
 
     return true;
 }
 
+// Explicit instantiations of GetShapedWord, to avoid libxul link failure
+template gfxShapedWord*
+gfxFont::GetShapedWord(DrawTarget *aDrawTarget,
+                       const uint8_t *aText,
+                       uint32_t aLength,
+                       uint32_t aHash,
+                       Script aRunScript,
+                       bool aVertical,
+                       int32_t aAppUnitsPerDevUnit,
+                       uint32_t aFlags,
+                       gfxTextPerfMetrics *aTextPerf);
+
+template gfxShapedWord*
+gfxFont::GetShapedWord(DrawTarget *aDrawTarget,
+                       const char16_t *aText,
+                       uint32_t aLength,
+                       uint32_t aHash,
+                       Script aRunScript,
+                       bool aVertical,
+                       int32_t aAppUnitsPerDevUnit,
+                       uint32_t aFlags,
+                       gfxTextPerfMetrics *aTextPerf);
+
 // Explicit instantiations of SplitAndInitTextRun, to avoid libxul link failure
 template bool
 gfxFont::SplitAndInitTextRun(DrawTarget *aDrawTarget,
                              gfxTextRun *aTextRun,
                              const uint8_t *aString,
                              uint32_t aRunStart,
                              uint32_t aRunLength,
                              Script aRunScript,
diff --git a/gfx/thebes/gfxFont.h b/gfx/thebes/gfxFont.h
index c9ec10e..bf4d5c0 100644
--- a/gfx/thebes/gfxFont.h
+++ b/gfx/thebes/gfxFont.h
@@ -2168,16 +2168,82 @@ protected:
     // doesn't appear bolded, it appears as if a bad text shadow exists
     // when a non-identity transform exists.  Use an offset factor so that
     // the second draw occurs at a constant offset in device pixels.
     // This helper calculates the scale factor we need to apply to the
     // synthetic-bold offset.
     static double CalcXScale(DrawTarget* aDrawTarget);
 };
 
+// Explicit declarations of SplitAndInitTextRun, to avoid libxul link failure
+extern template bool
+gfxFont::SplitAndInitTextRun(DrawTarget *aDrawTarget,
+                             gfxTextRun *aTextRun,
+                             const uint8_t *aString,
+                             uint32_t aRunStart,
+                             uint32_t aRunLength,
+                             Script aRunScript,
+                             bool aVertical);
+extern template bool
+gfxFont::SplitAndInitTextRun(DrawTarget *aDrawTarget,
+                             gfxTextRun *aTextRun,
+                             const char16_t *aString,
+                             uint32_t aRunStart,
+                             uint32_t aRunLength,
+                             Script aRunScript,
+                             bool aVertical);
+
+// Explicit declarations of GetShapedWord, to avoid libxul link failure
+extern template gfxShapedWord*
+gfxFont::GetShapedWord(DrawTarget *aDrawTarget,
+                       const uint8_t *aText,
+                       uint32_t aLength,
+                       uint32_t aHash,
+                       Script aRunScript,
+                       bool aVertical,
+                       int32_t aAppUnitsPerDevUnit,
+                       uint32_t aFlags,
+                       gfxTextPerfMetrics *aTextPerf);
+
+extern template gfxShapedWord*
+gfxFont::GetShapedWord(DrawTarget *aDrawTarget,
+                       const char16_t *aText,
+                       uint32_t aLength,
+                       uint32_t aHash,
+                       Script aRunScript,
+                       bool aVertical,
+                       int32_t aAppUnitsPerDevUnit,
+                       uint32_t aFlags,
+                       gfxTextPerfMetrics *aTextPerf);
+
+// Explicit declarations of InitFakeSmallCapsRun, to avoid libxul link failure
+template<> bool
+gfxFont::InitFakeSmallCapsRun(DrawTarget *aDrawTarget,
+                              gfxTextRun *aTextRun,
+                              const uint8_t *aText,
+                              uint32_t    aOffset,
+                              uint32_t    aLength,
+                              uint8_t     aMatchType,
+                              uint16_t    aOrientation,
+                              Script      aScript,
+                              bool        aSyntheticLower,
+                              bool        aSyntheticUpper);
+
+template<> bool
+gfxFont::InitFakeSmallCapsRun(DrawTarget *aDrawTarget,
+                              gfxTextRun *aTextRun,
+                              const char16_t *aText,
+                              uint32_t    aOffset,
+                              uint32_t    aLength,
+                              uint8_t     aMatchType,
+                              uint16_t    aOrientation,
+                              Script      aScript,
+                              bool        aSyntheticLower,
+                              bool        aSyntheticUpper);
+
 // proportion of ascent used for x-height, if unable to read value from font
 #define DEFAULT_XHEIGHT_FACTOR 0.56f
 
 // Parameters passed to gfxFont methods for drawing glyphs from a textrun.
 // The TextRunDrawParams are set up once per textrun; the FontDrawParams
 // are dependent on the specific font, so they are set per GlyphRun.
 
 struct TextRunDrawParams {

